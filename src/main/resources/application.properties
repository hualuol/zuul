#tomcat 端口配置
server.port=8999
spring.application.name=springboot-demo
#数据库  连接配置 开始
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/platform?serverTimezone=UTC&characterEncoding=utf-8 
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.max-idle=10
spring.datasource.max-wait=10000
spring.datasource.min-idle=5
spring.datasource.initial-size=5
#数据库  连接配置  结束

#redis配置开始
#Redis服务器连接端口
spring.redis.port=6379
#Redis服务器连接密码（默认为空）
spring.redis.password=123456
#连接超时时间（毫秒）
spring.redis.timeout=30000
#redis配置结束


#session生命周期
server.servlet.session.timeout=60

#日志 配置文件
logging.config=classpath:log4j2.xml
#activeMQ 整合配置 开始

#消息模式 true:广播(Topic)，false:队列(Queue),默认时falseSecurityUtils.getSubject().getSession().setTimeout
#暂时只能接收一种消息，等待改进
spring.jms.pub-sub-domain=true
#连接地址
spring.activemq.broker-url=failover:tcp://127.0.0.1:61616
#是否是内存模式，默认为true.
spring.activemq.in-memory=true
#下列配置要增加依赖。是否开启activemq连接池
spring.activemq.pool.enabled=true
#最大连接数
spring.activemq.pool.max-connections=100
# 信任所有的包
# 如果传输的对象是Object 这里必须加上这句或者指定信任的包  否则会导致对象序列化失败 出现classNotFound异常
# 详细： http://activemq.apache.org/objectmessage.html
spring.activemq.packages.trust-all=true
# 账号
spring.activemq.user=admin
# 密码
spring.activemq.password=admin
#activeMQ 整合配置 结束


#springcloud 将自己的服务注册到服务中心 配置开始

#是否注册到eureka服务器(默认是true)
eureka.client.registerWithEureka=true 
#是否从eureka服务器获取注册信息
eureka.client.fetchRegistry=true
#是否开启自我保护模式，默认为true。
eureka.server.enable-self-preservation=true
#续期时间，即扫描失效服务的间隔时间（缺省为60*1000ms）
eureka.server.eviction-interval-timer-in-ms=10000
# 当调用getHostname获取实例的hostname时，返回ip而不是host名称
eureka.instance.prefer-ip-address=true
# 指定自己的ip信息，不指定的话会自己寻找
#eureka.instance.ip-address=192.168.14.120
# 服务失效时间，默认值90秒（90秒即过期）
eureka.instance.lease-expiration-duration-in-seconds=90
# 服务续约(renew)的间隔，默认为30秒（也就是30秒一次心跳）
eureka.instance.lease-renewal-interval-in-seconds=30
# 修改Eureka的Status一列的构成
eureka.instance.instance-id=${spring.application.name}:${server.port}

eureka.client.serviceUrl.defaultZone=http://localhost:10086/eureka/
#配置结束
#配置结束


#springCloud feign客户端配置开始 （哪有有用到哪里就是客户端，其他就相当于服务端）
#请求GZIP压缩
feign.compression.request.enabled=true
#响应GIZP压缩
feign.compression.response.enable=true
#压缩支持的mime type
feign.compression.request.mime-types=text/xml,application/xml.application/json
#压缩数据大小的最小值
feign.compression.request.min-request-size=2048
#配置熔断 默认false不可以熔断
feign.hystrix.enabled=true
#配置熔断请求超时时间 熔断请求超时时间>ribbon的连接时间,不然会在ribbon还没调用完就进入熔断回调方法
#ribbon还有默认一次重试。另：可以单独对具体方法设置熔断时间  下面的default可以改为具体的方法名或服务名
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=17000
#指的是建立连接后从服务器读取到可用资源所用的时间,单位是ms （默认是1000,如果1s内没有返回，就判断请求失败）
feign.client.config.default.connect-timeout=10000
#指的是建立连接所用的时间，适用于网络状况正常的情况下，两端连接所用的时间
feign.client.config.default.read-timeout=10000
#配置负载均衡策略
#配置方式： 微服务名称.ribbon.NFLoadBalancerRuleClassName=1或2或3或4或5
#1=com.netflix.loadbalancer.RandomRule #配置规则 随机
#2=com.netflix.loadbalancer.RoundRobinRule #配置规则 轮询  默认规则
#3=com.netflix.loadbalancer.RetryRule #配置规则 重试
#4=com.netflix.loadbalancer.WeightedResponseTimeRule #配置规则 响应时间权重
#5=com.netflix.loadbalancer.BestAvailableRule #配置规则 最空闲连接策略
SPRINGBOOT-DEMO.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule
#配置结束